// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  orders      Order[]
  Appointment Appointment[]
  plantOrder  plantOrders[]
  comment     BlogComment[]
  likes       Like[]
}

model Nursery {
  id           Int           @id @default(autoincrement())
  name         String
  email        String
  password     String
  location     String
  description  String
  appointments Appointment[]
}

model Appointment {
  id        Int      @id @default(autoincrement())
  userId    Int
  nurseryId Int
  date      DateTime
  status    String   @default("pending")
  user      User     @relation(fields: [userId], references: [id])
  nursery   Nursery  @relation(fields: [nurseryId], references: [id])
}

model Plant {
  id          Int    @id @default(autoincrement())
  name        String
  category    String
  description String
}

model buyPlant {
  id       Int           @id @default(autoincrement())
  name     String
  Price    Int
  category String
  Stock    Int
  orders   plantOrders[]
}

model plantOrders {
  id        Int      @id @default(autoincrement())
  userId    Int
  plantId   Int
  quantity  Int
  status    String   @default("pending")
  orderedAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  buyPlant buyPlant @relation(fields: [plantId], references: [id])
}

model Medicine {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  orders      Order[]
}

model Order {
  id         Int      @id @default(autoincrement())
  userId     Int
  medicineId Int
  quantity   Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  medicine Medicine @relation(fields: [medicineId], references: [id])
}

model Form {
  id      Int    @id @default(autoincrement())
  email   String
  message String
}

model BlogPost {
  id                 Int               @id @default(autoincrement())
  title              String
  content            String
  name               String
  imageUrl           String
  comments           BlogComment[]
  likes              Like[]
  createdAt          DateTime          @default(now())
  categoryType       CategoryType      @default(OTHER)
  IndoorPlantBlog    IndoorPlantBlog?  @relation(fields: [indoorPlantBlogId], references: [id])
  indoorPlantBlogId  Int?
  OutdoorPlantBlog   OutdoorPlantBlog? @relation(fields: [outdoorPlantBlogId], references: [id])
  outdoorPlantBlogId Int?
  OtherPlantBlog     OtherPlantBlog?   @relation(fields: [otherPlantBlogId], references: [id])
  otherPlantBlogId   Int?
}

model IndoorPlantBlog {
  id    Int        @id @default(autoincrement())
  posts BlogPost[]
}

model OutdoorPlantBlog {
  id    Int        @id @default(autoincrement())
  posts BlogPost[]
}

model OtherPlantBlog {
  id    Int        @id @default(autoincrement())
  posts BlogPost[]
}

enum CategoryType {
  INDOOR
  OUTDOOR
  OTHER
}

model BlogComment {
  id        Int      @id @default(autoincrement())
  content   String
  post      BlogPost @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  post      BlogPost @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}
